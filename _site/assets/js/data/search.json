[
  
  {
    "title": "Process Injection",
    "url": "/posts/ProcessInjection/",
    "categories": "Windows, AVBypass",
    "tags": "windows",
    "date": "2024-03-22 10:28:00 -0400",
    





    
    "snippet": "What is Process Injection  As described by MITRE, process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another p...",
    "content": "What is Process Injection  As described by MITRE, process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.In other words, process injection is a technique commonly used by attackers to inject a malicious shellcode or payload inside the memory space of a running process. The type of payload we can run ranges from executing a random application such as calc.exe to a reverse shell."
  },
  
  {
    "title": "Windows Memory",
    "url": "/posts/WindowsMemory/",
    "categories": "Windows, Memory",
    "tags": "windows, Memory",
    "date": "2024-03-22 10:25:00 -0400",
    





    
    "snippet": "How does the Windows Memory work ?Everybody knows what the RAM memory is, but how does it work ? In general, computer processors (CPU) are constantly making read and write operations. If this was d...",
    "content": "How does the Windows Memory work ?Everybody knows what the RAM memory is, but how does it work ? In general, computer processors (CPU) are constantly making read and write operations. If this was done on the disk (SSD or HDD) constantly the computer would be very slow. That is why an intermediate place to store data was required.Memory is a physical storage used by CPUs to store data that is constantly read. This memory is temporary and is always loaded on each boot.Let’s first delve into the whole process of memory usage from boot to running the user context to properly understand it. Bear in mind that I will be explaining all complex concepts at the beggining of each section so that everything is made clearer.To begin with, in order to understand memory, it is important to make clear where does it start. How the computers use memory to boot and start ?1. Booting Process  Basic Input/Output System (BIOS) or Unified Extensible Firmware Interface (UEFI) main function is to initialize the hardware components and start the Operating System. The firmware then takes care of configuring and ensuring a proper hardware state. RAM, Disks, motherboard, graphics card.Booting is the process of switching the computer ON and starting the operating system. The proces, consists in 6 steps:  BIOS and Program Setup  Power-On-Self-Test (POST)  Operating System Load  Boot Loader Execution  Kernel Initialization  Logon/Graphical InterfaceThe following process describes how the BIOS Legacy works. On modern systems, UEFI is utilised and uses different techniques to provide a more secure and efficient boot. I will start explaning BIOS and will expand with UEFI.1.1 Basic Input/Output System (BIOS)  A REGISTER is a physical component of CPUs that are small and are intended for fast storage. They are used to store operands, intermediate results, memory addresses and other data required by the CPU. They are crutial to execute instructions efficiently. (Arithmetic instructions)  A CPU runs instructions sequentially, i.e. first moving one value to a register, then adding 1 to that register, etc.  JUMP is an assembly instruction that lets the CPU/program know the place from which needs to start reading instructions. If some code I want to execute starts in 0xFFFF10 and the CPU is currently executing instructions sequentially at 0x120321, if the next instruction is a JUMP 0xFFFF10, the CPU will start running instructions at that memory address.  Read-Only Memory (ROM) is a non-volatile memory, which means that it retains its contents even when power is turned off. It is a physical chip that is commonly found on motherboards. They contain firmware or instructions that are essential for booting up the system and performing basic input/output operations. This memory and can only be written once and is then read-only.  A Boot Loader is a small program that resides in the system’s firmware or in a dedicated boot partition. Its primary function is to load the Operating System into memory and start its execution. It handles the transition from the firmware’s execution to the operating system’s execution.1. BIOS and Pogram Setup  When the computer is first started, the CPU executes a harcoded JUMP instruction from a CPU register.  The CPU jumps to a predefined memory location in the Read-Only Memory (ROM)  The CPU starts executing the BIOS/UEFI directly from the ROM.2. Power-On-Self-Test (POST)  The BIOS runs a power-on self-test (POST) to check and initialize required devices such as main memory (DRAM), the CPU, the PCI bus and the PCI devices…3. Operating System Load  If the POST succeeds, the BIOS loads an MBR Partition Table into the RAM.  The BIOS then goes through a pre-configured list of non-volatile storage devices until finds one that is bootable.  Typically the primary boot device is the internal Hard Drive or SSD, where the OS is installed.4. Boot Loader Execution  The boot loader, such as the Windows Boot Manager (bootmgr), is loaded from the designated boot device into memory.  Once it is executed, it loads the Windows kernel (ntoskrnl.exe) into RAM memory and hands over the control.  The kernel initializes the Windows executive subsystem and other core components required for the operating system to function.5. Kernel Initialization  The Windows Kernel initializes various system services, drivers, and components necessary for system operation.  Sets up memory management, initializes hardware drivers, and prepares the system for user interaction.6. Logon/Graphical Interface  The Graphical User Interface (GUI) or login screen is presented to the user.  Authentication is required and the Windows Desktop Environment is loaded.1.2 Unified Extensible Firmware Interface (UEFI)1. UEFI Initialization  When the computer is turned ON, the UEFI firmware initializes.  UEFI firmware performs various initialization tasks, such as detecting and initializing hardware components, configuring system settings, and setting up the boot environment.2. Boot Device Selection  The UEFI firmware locates and prioritizes bootable devices based on the boot order configured in the UEFI settings.  Bootable devices include internal storage drives (HDDs/SSDs), external storage devices, optical drives, and network boot options.3. Boot Loader Execution  UEFI firmware loads the boot loader specified in the boot order.  The boot loader, often the Windows Boot Manager (bootmgfw.efi) for Windows systems, or GRUB for Linux systems, is responsible for loading the operating system kernel and initiating the boot process.4. Operating System Loading  Once the boot loader is executed, it loads the operating system kernel (e.g., Windows kernel, Linux kernel) into memory.  The kernel initializes the operating system, sets up device drivers, and prepares the system for user interaction.5. Graphical Interface or Logon  Finally, the operating system presents the graphical user interface (GUI) or login screen to the user.  If user authentication is required, the user logs in with their credentials.  Once logged in, the desktop environment or user interface is loaded, and the user can start using the operating system.2. What is the Memory ?Computers essentially work by making multiple read and write operations. For that reason, they need some place to work with that data. This is usually done on the register I mentioned before as they are very quick and efficient although that is the most granual way of speaking about memory. If we go back a bit we realise that computers can manage big chunks of data such as huge videogames, coding applications, etc. They must be stored somewhere, this is known as Non-Volatile memory from which we highlight the Solid-state drive (SSD) or the Hard-disk drive (HDD). However, if the computer only used these sort of disks, the operations the application had to do would be very inefficient and heavy weight.At this point the computers needed an intermediate Volatile memory in where they could store the running processes temporarily and execute them from that place. That would make the whole running of the application faster.3."
  }
  
]

